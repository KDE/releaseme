#!/usr/bin/env ruby
#!/bin/bash
# SPDX-License-Identifier: GPL-2.0-only OR GPL-3.0-only OR LicenseRef-KDE-Accepted-GPL
# SPDX-FileCopyrightText: 2023 Jonathan Riddell <jr@jriddell.org>

# Run before making tars
# ./update-versions
# and just after a release update versions for next release run
# ./update-versions --next

# It'll update the version and the dep version for the next release

require 'net/http'
require 'json'
require 'optparse'
require 'fileutils'
require_relative 'lib/plasma_version'
require_relative 'lib/kde_identify'
require_relative 'retry'

class UpdateVersions
  def initialize
    @plasma_versions = PlasmaVersion.new
    @next = false
    @trial = false
    OptionParser.new do |opts|
      opts.banner = "Usage: update-versions [options]"

      opts.on("-t", "--trial", "Trial Run (do not push)") do |v|
        @trial = v
      end
      opts.on("-n", "--next", "Next") do |v|
        @next = v
      end
    end.parse!
    @variable = "PROJECT_VERSION"
    @variable = "KF_DEP_VERSION" if @plasma_versions.product == "frameworks"
    @variable = "KF_VERSION" if @plasma_versions.product == "frameworks" and @next
    @special_variables = {"extra-cmake-modules"=> "VERSION"}
    @directory = "tmp-version-update"
    if @next
      @new_version = @plasma_versions.next_version
    else
      @new_version = @plasma_versions.version
    end
  end

  def doUpdates
    #
    FileUtils.rm_rf(@directory)
    FileUtils.mkdir(@directory)
    Dir.chdir(@directory) do
      # Get products
      repos = File.readlines("../git-repositories-for-release-#{@plasma_versions.product}", chomp: true)
      repos.each do |repo|
        # Get KDE invent path
        invent_category = KDEIndentify.get_kde_category(repo)
        # git clone
        puts ":: Git cloning #{repo} Branch #{@plasma_versions.branch}"
        sleep(2) # meh invent.kde.org seems to block git clone if you do several
        Retry.retry_it(times: 3, sleep: 4) { `git clone --depth 1 --no-single-branch invent:#{invent_category}/#{repo} #{repo}` || raise }
        Dir.chdir(repo) do
          `git checkout #{@plasma_versions.branch}`
          # do sed
          if @special_variables.include?(repo) and @next
            @sub_variable = @special_variables[repo]
          else
            @sub_variable = @variable
          end
          if File.exist?("CMakeLists.txt")
            system('sed', '-i', "s,set(#{@sub_variable} " + '\".*\"' + ",set(#{@sub_variable} " + '\"' + "#{@new_version}" + '\",', "CMakeLists.txt")
            #system('sed', '-i', "s,find_package(ECM [0-9\.]\\+,find_package(ECM #{@new_version},", "CMakeLists.txt")
          end
          # kapidox has a setup.py
          if File.exist?("setup.py") and @next
            system('sed', '-i', "s,version=" + "'.*'" + ",version=" + "'#{@new_version}',", "setup.py")
          end

          if @plasma_versions.origin != "trunk"
            appstream = Dir.glob("**/*.appdata.xml") + Dir.glob("**/*.metainfo.xml")
            appstream.each do |appstream_file|
              puts "::#{@plasma_versions.appstream_updater} #{appstream_file} --version #{@new_version} --datastring #{@plasma_versions.releasedate} --releases-to-show 4"
              `#{@plasma_versions.appstream_updater} #{appstream_file} --version #{@new_version} --datestring #{@plasma_versions.releasedate} --releases-to-show 4`
            end
          end
          system("git --no-pager diff")
          `git commit -a -m 'update version for new release'`
          if not @trial
            `git push`
          end
          # push to master
          if @plasma_versions.origin != "trunk" and @plasma_versions.origin != "lts"
            `git checkout master`
            appstream = Dir.glob("**/*.appdata.xml")
            appstream << Dir.glob("**/*.metainfo.xml")
            appstream.each do |appstream_file|
              `#{@plasma_versions.appstream_updater} #{appstream_file} --version #{@new_version} --datestring #{@plasma_versions.releasedate} --releases-to-show 4`
            end
          end
          system("git --no-pager diff")
          `git commit -a -m 'update version for new release'`
          if not @trial
            `git push`
          end
        end
      end
    end
  end

end

updateVersions = UpdateVersions.new
updateVersions.doUpdates
